require('dotenv').config();
const cron = require('node-cron');
const axios = require('axios');
const TelegramBot = require('node-telegram-bot-api');
const http = require('http');

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const TELEGRAM_BOT_TOKEN = process.env.TELEGRAM_BOT_TOKEN;
const TELEGRAM_CHAT_ID = process.env.TELEGRAM_CHAT_ID;
const DAILY_REPORT_TIME = '0 19 * * *'; // –ï–∂–µ–¥–Ω–µ–≤–Ω–æ –≤ 19:00 –ú–°–ö
const HOURLY_CHECK_TIME = '0 * * * *'; // –ö–∞–∂–¥—ã–π —á–∞—Å

// –°–ø–∏—Å–æ–∫ –±–æ—Ç–æ–≤ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
const BOTS = [
  {
    name: 'EphemerisDecoder',
    url: process.env.EPHEMERIS_DECODER_URL || 'https://ephemerisdecoder.up.railway.app/health',
    description: 'EphemerisDecoder —Å–µ—Ä–≤–∏—Å –Ω–∞ Railway'
  },
  {
    name: 'Dream Sense Bot',
    url: process.env.DREAM_SENSE_BOT_URL || 'https://dream-sense-bot.railway.app/health',
    description: 'Dream Sense Bot –Ω–∞ Railway'
  },
  {
    name: 'Dream Sense Test Bot',
    url: process.env.DREAM_SENSE_TEST_BOT_URL || 'https://dream-sense-test-bot.railway.app/health',
    description: 'Dream Sense Test Bot –Ω–∞ Railway'
  }
];

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram –±–æ—Ç–∞
let bot;
if (TELEGRAM_BOT_TOKEN) {
  bot = new TelegramBot(TELEGRAM_BOT_TOKEN, { polling: true });
  
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /report –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç—á–µ—Ç–∞ –∑–¥–µ—Å—å –∏ —Å–µ–π—á–∞—Å
  bot.onText(/\/report/, async (msg) => {
    const chatId = msg.chat.id;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–º–∞–Ω–¥–∞ –ø—Ä–∏—à–ª–∞ –æ—Ç –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if (chatId.toString() === TELEGRAM_CHAT_ID) {
      console.log('üìä –ó–∞–ø—Ä–æ—Å –æ—Ç—á–µ—Ç–∞ –ø–æ –∫–æ–º–∞–Ω–¥–µ /report –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', chatId);
      
      try {
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
        await bot.sendMessage(chatId, 'üîÑ –ó–∞–ø—É—Å–∫–∞—é –ø—Ä–æ–≤–µ—Ä–∫—É –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤...');
        
        // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç
        await sendDailyReport();
        
        console.log('‚úÖ –û—Ç—á–µ—Ç –ø–æ –∫–æ–º–∞–Ω–¥–µ /report –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω');
      } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã /report:', error.message);
        await bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã: ' + error.message);
      }
    } else {
      console.log('üö´ –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–∏—Ç—å –æ—Ç—á–µ—Ç –æ—Ç –Ω–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', chatId);
      await bot.sendMessage(chatId, '‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.');
    }
  });
  
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help
  bot.onText(/\/help/, async (msg) => {
    const chatId = msg.chat.id;
    
    if (chatId.toString() === TELEGRAM_CHAT_ID) {
      const helpMessage = `ü§ñ <b>–ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞:</b>\n\n` +
        `üìä <b>/report</b> - –ü–æ–ª—É—á–∏—Ç—å –ø–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤\n` +
        `‚ùì <b>/help</b> - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É\n\n` +
        `üìÖ <b>–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –æ—Ç—á–µ—Ç—ã:</b>\n` +
        `‚Ä¢ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –ø–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç –≤ 19:00 –ú–°–ö\n` +
        `‚Ä¢ –ï–∂–µ—á–∞—Å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ (—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö)\n\n` +
        `üïê –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –ú–°–ö: ${getMoscowTime()}`;
      
      await bot.sendMessage(chatId, helpMessage, { parse_mode: 'HTML' });
    }
  });
  
  console.log('‚úÖ Telegram –±–æ—Ç –∑–∞–ø—É—â–µ–Ω —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –∫–æ–º–∞–Ω–¥ /report –∏ /help');
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è –±–æ—Ç–∞
async function checkBotHealth(bot) {
  try {
    console.log(`–ü—Ä–æ–≤–µ—Ä—è—é ${bot.name}...`);
    
    const response = await axios.get(bot.url, {
      timeout: 10000, // 10 —Å–µ–∫—É–Ω–¥ —Ç–∞–π–º–∞—É—Ç
      validateStatus: function (status) {
        return status < 500; // –ü—Ä–∏–Ω–∏–º–∞–µ–º –ª—é–±—ã–µ —Å—Ç–∞—Ç—É—Å—ã –º–µ–Ω—å—à–µ 500
      }
    });
    
    if (response.status === 200) {
      console.log(`‚úÖ ${bot.name} —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ`);
      return { status: 'healthy', bot: bot.name, response: response.status };
    } else {
      console.log(`‚ö†Ô∏è ${bot.name} –æ—Ç–≤–µ—á–∞–µ—Ç —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º ${response.status}`);
      return { status: 'warning', bot: bot.name, response: response.status };
    }
  } catch (error) {
    // –£–ª—É—á—à–µ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
    let errorMessage = error.message;
    let errorCode = error.code || 'UNKNOWN';
    
    if (error.code === 'ECONNREFUSED') {
      errorMessage = '–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –æ—Ç–∫–∞–∑–∞–Ω–æ - —Å–µ—Ä–≤–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω';
      errorCode = 'CONNECTION_REFUSED';
    } else if (error.code === 'ENOTFOUND') {
      errorMessage = '–î–æ–º–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω - –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π URL';
      errorCode = 'DOMAIN_NOT_FOUND';
    } else if (error.code === 'ETIMEDOUT') {
      errorMessage = '–¢–∞–π–º–∞—É—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è - —Å–µ—Ä–≤–∏—Å –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç';
      errorCode = 'TIMEOUT';
    } else if (error.response) {
      // –°–µ—Ä–≤–µ—Ä –æ—Ç–≤–µ—Ç–∏–ª —Å –æ—à–∏–±–∫–æ–π
      errorMessage = `HTTP ${error.response.status}: ${error.response.statusText}`;
      errorCode = `HTTP_${error.response.status}`;
    }
    
    console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ ${bot.name}: ${errorMessage} (${errorCode})`);
    return { 
      status: 'error', 
      bot: bot.name, 
      error: errorMessage,
      code: errorCode
    };
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ Telegram
async function sendTelegramNotification(message) {
  if (!bot || !TELEGRAM_CHAT_ID) {
    console.log('Telegram –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞—é —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ');
    return;
  }
  
  try {
    await bot.sendMessage(TELEGRAM_CHAT_ID, message, { parse_mode: 'HTML' });
    console.log('–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram');
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ Telegram:', error.message);
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –ø–æ –ú–°–ö
function getMoscowTime() {
  const now = new Date();
  const utcTime = now.toISOString();
  const moscowTime = now.toLocaleString('ru-RU', {
    timeZone: 'Europe/Moscow',
    year: 'numeric',
    month: '2-digit',
    day: '2-digit',
    hour: '2-digit',
    minute: '2-digit',
    second: '2-digit',
    hour12: false
  });
  
  // –õ–æ–≥–∏—Ä—É–µ–º –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
  console.log(`üïê –í—Ä–µ–º—è UTC: ${utcTime}`);
  console.log(`üïê –í—Ä–µ–º—è –ú–°–ö: ${moscowTime}`);
  
  return moscowTime;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –≤—Å–µ—Ö –±–æ—Ç–æ–≤
async function monitorAllBots() {
  const moscowTime = getMoscowTime();
  console.log(`\nüïê –ù–∞—á–∏–Ω–∞—é –ø—Ä–æ–≤–µ—Ä–∫—É –±–æ—Ç–æ–≤: ${moscowTime} (–ú–°–ö)`);
  
  const results = [];
  
  for (const bot of BOTS) {
    const result = await checkBotHealth(bot);
    results.push(result);
    
    // –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
    await new Promise(resolve => setTimeout(resolve, 1000));
  }
  
  // –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
  const healthy = results.filter(r => r.status === 'healthy');
  const warnings = results.filter(r => r.status === 'warning');
  const errors = results.filter(r => r.status === 'error');
  
  console.log(`\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ–≤–µ—Ä–∫–∏:`);
  console.log(`‚úÖ –†–∞–±–æ—Ç–∞—é—Ç: ${healthy.length}`);
  console.log(`‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è: ${warnings.length}`);
  console.log(`‚ùå –û—à–∏–±–∫–∏: ${errors.length}`);
  
  return { results, healthy, warnings, errors, moscowTime };
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –ø–æ–ª–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞
async function sendDailyReport() {
  console.log('üìÖ –û—Ç–ø—Ä–∞–≤–ª—è—é –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –ø–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç...');
  
  const { results, healthy, warnings, errors, moscowTime } = await monitorAllBots();
  
  let message = `üìÖ <b>–ï–ñ–ï–î–ù–ï–í–ù–´–ô –û–¢–ß–ï–¢ –û –°–û–°–¢–û–Ø–ù–ò–ò –ë–û–¢–û–í</b>\n\n`;
  message += `‚úÖ <b>–†–∞–±–æ—Ç–∞—é—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ:</b> ${healthy.length}\n`;
  message += `‚ö†Ô∏è <b>–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è:</b> ${warnings.length}\n`;
  message += `‚ùå <b>–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏:</b> ${errors.length}\n\n`;
  
  if (errors.length > 0) {
    message += `‚ùå <b>–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏:</b>\n`;
    errors.forEach(error => {
      message += `‚Ä¢ <b>${error.bot}</b>: ${error.error}\n`;
    });
    message += '\n';
  }
  
  if (warnings.length > 0) {
    message += `‚ö†Ô∏è <b>–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è:</b>\n`;
    warnings.forEach(warning => {
      message += `‚Ä¢ <b>${warning.bot}</b>: HTTP ${warning.response}\n`;
    });
    message += '\n';
  }
  
  if (healthy.length > 0) {
    message += `‚úÖ <b>–†–∞–±–æ—Ç–∞—é—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ:</b>\n`;
    healthy.forEach(bot => {
      message += `‚Ä¢ <b>${bot.bot}</b>\n`;
    });
    message += '\n';
  }
  
  message += `üïê –í—Ä–µ–º—è –æ—Ç—á–µ—Ç–∞: ${moscowTime} (–ú–°–ö)\n`;
  message += `üìä –í—Å–µ–≥–æ –ø—Ä–æ–≤–µ—Ä–µ–Ω–æ —Å–µ—Ä–≤–∏—Å–æ–≤: ${results.length}`;
  
  await sendTelegramNotification(message);
  console.log('‚úÖ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω');
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —Ç–æ–ª—å–∫–æ –æ–± –æ—à–∏–±–∫–∞—Ö
async function sendErrorNotifications() {
  console.log('üîç –ü—Ä–æ–≤–µ—Ä—è—é –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –æ—à–∏–±–æ–∫...');
  
  const { results, healthy, warnings, errors, moscowTime } = await monitorAllBots();
  
  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –æ—à–∏–±–∫–∏ –∏–ª–∏ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è
  if (errors.length > 0 || warnings.length > 0) {
    let message = `üö® <b>–û–ë–ù–ê–†–£–ñ–ï–ù–´ –ü–†–û–ë–õ–ï–ú–´</b>\n\n`;
    
    if (errors.length > 0) {
      message += `‚ùå <b>–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏:</b>\n`;
      errors.forEach(error => {
        message += `‚Ä¢ <b>${error.bot}</b>: ${error.error}\n`;
      });
      message += '\n';
    }
    
    if (warnings.length > 0) {
      message += `‚ö†Ô∏è <b>–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è:</b>\n`;
      warnings.forEach(warning => {
        message += `‚Ä¢ <b>${warning.bot}</b>: HTTP ${warning.response}\n`;
      });
      message += '\n';
    }
    
    message += `üïê –í—Ä–µ–º—è –ø—Ä–æ–≤–µ—Ä–∫–∏: ${moscowTime} (–ú–°–ö)`;
    
    await sendTelegramNotification(message);
    console.log('üö® –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–∞—Ö –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ');
  } else {
    console.log('‚úÖ –í—Å–µ —Å–µ—Ä–≤–∏—Å—ã —Ä–∞–±–æ—Ç–∞—é—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ, —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è—é');
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
async function sendTestMessage() {
  if (!bot || !TELEGRAM_CHAT_ID) {
    console.log('Telegram –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω');
    return;
  }
  
  try {
    const moscowTime = getMoscowTime();
    const message = `üß™ <b>–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ</b>\n\n–ë–æ—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∑–∞–ø—É—â–µ–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç!\n\nüïê –í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞: ${moscowTime} (–ú–°–ö)\n\nüìÖ <b>–†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã:</b>\n‚Ä¢ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –ø–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç –≤ 19:00 –ú–°–ö\n‚Ä¢ –ï–∂–µ—á–∞—Å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ (—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö)\n\nüí¨ <b>–ö–æ–º–∞–Ω–¥—ã:</b>\n‚Ä¢ <code>/report</code> - –ü–æ–ª—É—á–∏—Ç—å –æ—Ç—á–µ—Ç —Å–µ–π—á–∞—Å\n‚Ä¢ <code>/help</code> - –°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º`;
    await bot.sendMessage(TELEGRAM_CHAT_ID, message, { parse_mode: 'HTML' });
    console.log('–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ');
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è:', error.message);
  }
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞
async function startMonitoring() {
  const moscowTime = getMoscowTime();
  console.log('üöÄ –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –±–æ—Ç–æ–≤...');
  console.log(`üì± Telegram –±–æ—Ç: ${TELEGRAM_BOT_TOKEN ? '–ù–∞—Å—Ç—Ä–æ–µ–Ω' : '–ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω'}`);
  console.log(`üë• Chat ID: ${TELEGRAM_CHAT_ID || '–ù–µ —É–∫–∞–∑–∞–Ω'}`);
  console.log(`üìÖ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á–µ—Ç: ${DAILY_REPORT_TIME} (19:00 –ú–°–ö)`);
  console.log(`‚è∞ –ï–∂–µ—á–∞—Å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏: ${HOURLY_CHECK_TIME}`);
  console.log(`ü§ñ –ë–æ—Ç–æ–≤ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: ${BOTS.length}`);
  console.log(`üïê –í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞: ${moscowTime} (–ú–°–ö)`);
  
  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
  await sendTestMessage();
  
  // –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–≤—É—é –ø—Ä–æ–≤–µ—Ä–∫—É
  await monitorAllBots();
  
  // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º cron –¥–ª—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –ø–æ–ª–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞ –≤ 19:00 –ú–°–ö
  cron.schedule(DAILY_REPORT_TIME, async () => {
    console.log('üìÖ –ó–∞–ø—É—Å–∫ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞...');
    await sendDailyReport();
  });
  
  // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º cron –¥–ª—è –µ–∂–µ—á–∞—Å–Ω—ã—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫ (—Ç–æ–ª—å–∫–æ –æ—à–∏–±–∫–∏)
  cron.schedule(HOURLY_CHECK_TIME, async () => {
    console.log('‚è∞ –ó–∞–ø—É—Å–∫ –µ–∂–µ—á–∞—Å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏...');
    await sendErrorNotifications();
  });
  
  console.log('‚úÖ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–ø—É—â–µ–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç!');
  console.log('üìÖ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –ø–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å—Å—è –≤ 19:00 –ú–°–ö');
  console.log('‚è∞ –ï–∂–µ—á–∞—Å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –±—É–¥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö');
  console.log('üí¨ –î–æ—Å—Ç—É–ø–Ω—ã –∫–æ–º–∞–Ω–¥—ã: /report, /help');
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
process.on('unhandledRejection', (reason, promise) => {
  console.error('–ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –ø—Ä–æ–º–∏—Å–∞:', reason);
});

process.on('uncaughtException', (error) => {
  console.error('–ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ:', error);
  process.exit(1);
});

// –°–æ–∑–¥–∞–µ–º HTTP —Å–µ—Ä–≤–µ—Ä –¥–ª—è health check
const server = http.createServer((req, res) => {
  if (req.url === '/health') {
    const moscowTime = getMoscowTime();
    res.writeHead(200, { 'Content-Type': 'application/json' });
    res.end(JSON.stringify({
      status: 'healthy',
      service: 'Bot Health Monitor',
      timestamp: new Date().toISOString(),
      moscowTime: moscowTime,
      uptime: process.uptime(),
      bots: BOTS.length,
      schedule: {
        dailyReport: '19:00 –ú–°–ö',
        hourlyChecks: '–ö–∞–∂–¥—ã–π —á–∞—Å (—Ç–æ–ª—å–∫–æ –æ—à–∏–±–∫–∏)'
      }
    }));
  } else if (req.url === '/') {
    const moscowTime = getMoscowTime();
    res.writeHead(200, { 'Content-Type': 'text/html' });
    res.end(`
      <html>
        <head><title>Bot Health Monitor</title></head>
        <body>
          <h1>ü§ñ Bot Health Monitor</h1>
          <p>–°–µ—Ä–≤–∏—Å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∑–¥–æ—Ä–æ–≤—å—è –±–æ—Ç–æ–≤ —Ä–∞–±–æ—Ç–∞–µ—Ç!</p>
          <p><a href="/health">Health Check</a></p>
          <p>–í—Ä–µ–º—è (–ú–°–ö): ${moscowTime}</p>
          <p>–í—Ä–µ–º—è (UTC): ${new Date().toISOString()}</p>
          <h3>üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ:</h3>
          <ul>
            <li><strong>–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –ø–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç:</strong> 19:00 –ú–°–ö</li>
            <li><strong>–ï–∂–µ—á–∞—Å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏:</strong> –¢–æ–ª—å–∫–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–∞—Ö</li>
          </ul>
        </body>
      </html>
    `);
  } else {
    res.writeHead(404, { 'Content-Type': 'text/plain' });
    res.end('Not Found');
  }
});

// –ó–∞–ø—É—Å–∫–∞–µ–º HTTP —Å–µ—Ä–≤–µ—Ä
const PORT = process.env.PORT || 3000;
server.listen(PORT, () => {
  console.log(`üåê HTTP —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
  console.log(`üîó Health check: http://localhost:${PORT}/health`);
});

// –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
startMonitoring().catch(error => {
  console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ:', error);
  process.exit(1);
});
